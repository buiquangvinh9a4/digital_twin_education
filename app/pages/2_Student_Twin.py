import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import os, csv
from tensorflow.keras.models import load_model
from scipy.special import expit

# =============================
# ‚öôÔ∏è C·∫•u h√¨nh trang
# =============================
st.set_page_config(page_title="Digital Twin Sinh vi√™n", layout="wide")
st.title("üßë‚Äçüéì Digital Twin Sinh vi√™n ‚Äî So s√°nh Th·ª±c & ·∫¢o")

# =============================
# 0Ô∏è‚É£ Load m√¥ h√¨nh (n·∫øu c√≥)
# =============================
MODEL_PATH = "models/oulad_lstm.h5"
use_real_model = os.path.exists(MODEL_PATH)
if use_real_model:
    model = load_model(MODEL_PATH)
    st.sidebar.success("‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh LSTM th·∫≠t")
else:
    st.sidebar.warning("‚ö†Ô∏è Ch∆∞a c√≥ m√¥ h√¨nh th·∫≠t. D√πng m√¥ ph·ªèng logistic gi·∫£ l·∫≠p")

# =============================
# 1Ô∏è‚É£ Load d·ªØ li·ªáu
# =============================
TEST_PATH = "data/processed/test.csv"
REAL_PATH = "data/processed/ou_real.csv"

@st.cache_data
def load_data():
    test = pd.read_csv(TEST_PATH)
    real = pd.read_csv(REAL_PATH) if os.path.exists(REAL_PATH) else pd.DataFrame()
    if "label" not in test.columns and not real.empty and "label" in real.columns:
        test = test.merge(real[["id_student", "label"]], on="id_student", how="left")
    if "label" not in test.columns:
        test["label"] = 0
    return test

df = load_data()
if df.empty:
    st.error("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu test.csv ‚Äî h√£y ch·∫°y l·∫°i ETL tr∆∞·ªõc.")
    st.stop()

# =============================
# 2Ô∏è‚É£ Ch·ªçn sinh vi√™n
# =============================
student_ids = df["id_student"].unique()
selected_student = st.sidebar.selectbox("üéì Ch·ªçn m√£ sinh vi√™n:", student_ids)
student_real = df[df["id_student"] == selected_student].iloc[0]

# =============================
# 3Ô∏è‚É£ B·ªë c·ª•c hai c·ªôt song song
# =============================
colL, colR = st.columns(2)

# ---------------------------------------------------------------------
# üß© PHYSICAL TWIN ‚Äî D·ªÆ LI·ªÜU TH·∫¨T
# ---------------------------------------------------------------------
with colL:
    st.header("üß© PHYSICAL TWIN ‚Äî D·ªØ li·ªáu th·ª±c t·∫ø (LMS)")
    col1, col2, col3 = st.columns(3)
    col1.metric("üìö T·ªïng l∆∞·ª£t click", int(student_real.get("tong_click", 0)))
    col2.metric("üìù S·ªë b√†i n·ªôp", int(student_real.get("so_bai_nop", 0)))
    col3.metric("üíØ ƒêi·ªÉm TB", f"{student_real.get('diem_tb', 0):.1f}")

    col4, col5 = st.columns(2)
    col4.metric("üìà Ho√†n th√†nh", f"{student_real.get('ti_le_hoan_thanh', 0)*100:.1f}%")
    col5.metric("üóìÔ∏è S·ªë tu·∫ßn ho·∫°t ƒë·ªông", int(student_real.get("so_tuan_hoat_dong", 0)))

    # ---- Bi·ªÉu ƒë·ªì ho·∫°t ƒë·ªông theo tu·∫ßn ----
    st.subheader("üìä Ho·∫°t ƒë·ªông h·ªçc t·∫≠p theo tu·∫ßn")

    week_cols = [c for c in df.columns if c.startswith("w") and c.endswith("_clicks")]
    if week_cols:
        clicks = student_real[week_cols].values
        week_range = list(range(1, len(week_cols) + 1))

        fig_click = px.line(
            x=week_range, y=clicks, markers=True,
            title="L∆∞·ª£t click theo tu·∫ßn",
            labels={"x": "Tu·∫ßn h·ªçc", "y": "S·ªë l∆∞·ª£t click"},
        )
        st.plotly_chart(fig_click, use_container_width=True)

        # Heatmap ph√¢n b·ªë ho·∫°t ƒë·ªông
        fig_heat = go.Figure(data=go.Heatmap(
            z=[clicks],
            x=[f"Tu·∫ßn {i}" for i in week_range],
            y=["Ho·∫°t ƒë·ªông"],
            colorscale="Blues"
        ))
        fig_heat.update_layout(title="Ph√¢n b·ªë click theo tu·∫ßn (Heatmap)")
        st.plotly_chart(fig_heat, use_container_width=True)
    else:
        st.info("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu tu·∫ßn (w0_clicks...).")

# ---------------------------------------------------------------------
# ü§ñ DIGITAL TWIN ‚Äî M√î PH·ªéNG AI
# ---------------------------------------------------------------------
with colR:
    st.header("ü§ñ DIGITAL TWIN ‚Äî M√¥ ph·ªèng h√†nh vi h·ªçc t·∫≠p")
    st.caption("ƒêi·ªÅu ch·ªânh c√°c tham s·ªë d∆∞·ªõi ƒë√¢y ƒë·ªÉ xem m√¥ h√¨nh d·ª± ƒëo√°n thay ƒë·ªïi ra sao:")

    # ==== Nh·∫≠p h√†nh vi m√¥ ph·ªèng ====
    input_clicks = st.slider("üìö T·ªïng l∆∞·ª£t truy c·∫≠p (clicks)", 0, 20000, int(student_real.get("tong_click", 0)))
    input_submits = st.slider("üìù S·ªë b√†i n·ªôp", 0, 10, int(student_real.get("so_bai_nop", 0)))
    input_avg_score = st.slider("üíØ ƒêi·ªÉm trung b√¨nh", 0, 100, int(student_real.get("diem_tb", 0)))
    input_completion = st.slider("üìà T·ª∑ l·ªá ho√†n th√†nh (%)", 0, 100, int(student_real.get("ti_le_hoan_thanh", 0) * 100))
    input_active_weeks = st.slider("üóìÔ∏è S·ªë tu·∫ßn ho·∫°t ƒë·ªông", 0, 20, int(student_real.get("so_tuan_hoat_dong", 0)))

    simulate_button = st.button("üß™ Ch·∫°y m√¥ ph·ªèng Digital Twin")

    if simulate_button:
        X_fake = np.array([[
            input_clicks / 20000,
            input_submits / 10,
            input_avg_score / 100,
            input_completion / 100,
            input_active_weeks / 20
        ]], dtype="float32")

        # ---- D·ª± ƒëo√°n k·∫øt qu·∫£ ----
        if use_real_model:
            # reshape (1, timesteps, features)
            X_seq = np.repeat(X_fake[:, np.newaxis, :], 1, axis=1)  # (1,1,5)
            y_prob = model.predict(X_seq, verbose=0).ravel()[0]
        else:
            score = (
                0.3 * (input_avg_score / 100)
                + 0.25 * (input_completion / 100)
                + 0.2 * (input_submits / 10)
                + 0.15 * min(input_clicks / 20000, 1)
                + 0.1 * (input_active_weeks / 20)
            )
            y_prob = expit(3.5 * (score - 0.5))

        y_label = int(y_prob > 0.5)
        result_text = "üéì ƒê·∫†T" if y_label else "‚ö†Ô∏è KH√îNG ƒê·∫†T"
        st.metric("K·∫øt qu·∫£ m√¥ ph·ªèng", result_text, f"{y_prob*100:.1f}%")

        # -----------------------------------------------------------------
        # üìä TWIN DELTA ‚Äî So s√°nh Th·ª±c & ·∫¢o
        # -----------------------------------------------------------------
        st.subheader("üìä Twin Delta ‚Äî So s√°nh ch·ªâ s·ªë Th·ª±c v√† ·∫¢o")

        real_vals = np.array([
            student_real.get("tong_click", 0)/20000,
            student_real.get("so_bai_nop", 0)/10,
            student_real.get("diem_tb", 0)/100,
            student_real.get("ti_le_hoan_thanh", 0),
            student_real.get("so_tuan_hoat_dong", 0)/20
        ])
        sim_vals = np.array([
            input_clicks/20000,
            input_submits/10,
            input_avg_score/100,
            input_completion/100,
            input_active_weeks/20
        ])

        delta_df = pd.DataFrame({
            "Ch·ªâ s·ªë": ["T·ªïng click", "S·ªë b√†i n·ªôp", "ƒêi·ªÉm TB", "Ho√†n th√†nh", "Tu·∫ßn ho·∫°t ƒë·ªông"],
            "Th·ª±c t·∫ø": real_vals * 100,
            "M√¥ ph·ªèng": sim_vals * 100,
            "Sai l·ªách (%)": (sim_vals - real_vals) * 100
        })
        st.dataframe(delta_df, use_container_width=True)

        # Radar chart
        categories = delta_df["Ch·ªâ s·ªë"].tolist()
        fig_radar = go.Figure()
        fig_radar.add_trace(go.Scatterpolar(r=delta_df["Th·ª±c t·∫ø"], theta=categories, fill="toself", name="Th·ª±c t·∫ø"))
        fig_radar.add_trace(go.Scatterpolar(r=delta_df["M√¥ ph·ªèng"], theta=categories, fill="toself", name="M√¥ ph·ªèng"))
        fig_radar.update_layout(polar=dict(radialaxis=dict(visible=True, range=[0, 100])), showlegend=True)
        st.plotly_chart(fig_radar, use_container_width=True)

        # -----------------------------------------------------------------
        # üìà Bi·ªÉu ƒë·ªì tu·∫ßn ‚Äî song song th·ª±c & m√¥ ph·ªèng
        # -----------------------------------------------------------------
        st.subheader("üìà Bi·ªÉu ƒë·ªì tu·∫ßn: Th·ª±c t·∫ø vs M√¥ ph·ªèng (so s√°nh tr·ª±c quan)")
        if week_cols:
            clicks_real = student_real[week_cols].values
            clicks_sim = clicks_real * (input_clicks / max(student_real.get("tong_click", 1), 1))

            fig_week = go.Figure()
            fig_week.add_trace(go.Scatter(x=week_range, y=clicks_real, mode='lines+markers', name='Th·ª±c t·∫ø'))
            fig_week.add_trace(go.Scatter(x=week_range, y=clicks_sim, mode='lines+markers', name='M√¥ ph·ªèng', line=dict(dash='dash')))
            fig_week.update_layout(title="So s√°nh l∆∞·ª£t click theo tu·∫ßn (Th·ª±c vs ·∫¢o)",
                                   xaxis_title="Tu·∫ßn h·ªçc", yaxis_title="L∆∞·ª£t click")
            st.plotly_chart(fig_week, use_container_width=True)

        # -----------------------------------------------------------------
        # üíæ L∆∞u l·ªãch s·ª≠ m√¥ ph·ªèng
        # -----------------------------------------------------------------
        os.makedirs("data/simulations", exist_ok=True)
        row = {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "id_student": selected_student,
            "so_bai_nop": input_submits,
            "diem_tb": input_avg_score,
            "ti_le_hoan_thanh": input_completion,
            "tong_click": input_clicks,
            "so_tuan_hoat_dong": input_active_weeks,
            "prob_pass": round(y_prob, 4),
        }
        with open("data/simulations/history.csv", "a", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=row.keys())
            if f.tell() == 0:
                writer.writeheader()
            writer.writerow(row)

st.caption("üîÅ Trang n√†y m√¥ ph·ªèng Digital Twin cho t·ª´ng sinh vi√™n, hi·ªÉn th·ªã d·ªØ li·ªáu th·∫≠t (Physical) v√† m√¥ ph·ªèng (Digital), k√®m bi·ªÉu ƒë·ªì tu·∫ßn, radar v√† l∆∞u l·ªãch s·ª≠ m√¥ ph·ªèng.")

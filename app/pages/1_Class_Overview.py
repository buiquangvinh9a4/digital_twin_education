import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import os
try:
    from app.utils import read_status, format_mtime
except ModuleNotFoundError:
    import sys
    import os as _os
    _ROOT = _os.path.abspath(_os.path.join(_os.path.dirname(__file__), "..", ".."))
    if _ROOT not in sys.path:
        sys.path.insert(0, _ROOT)
    from app.utils import read_status, format_mtime

# =============================
# ‚öôÔ∏è C·∫§U H√åNH TRANG
# =============================
st.set_page_config(page_title="T·ªïng quan l·ªõp h·ªçc", layout="wide")
st.title("üè´ T·ªïng quan l·ªõp h·ªçc ‚Äî Digital Twin (Song song Th·ª±c & ·∫¢o)")

TEST_PATH = "data/processed/test.csv"
REAL_PATH = "data/processed/ou_real.csv"
PRED_PATH = "data/processed/ou_pred.csv"

# =============================
# 1Ô∏è‚É£ N·∫†P D·ªÆ LI·ªÜU
# =============================
@st.cache_data(ttl=5)
def load_data():
    if not os.path.exists(TEST_PATH):
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y test.csv. H√£y ch·∫°y l·∫°i ETL.")
        return pd.DataFrame()

    test = pd.read_csv(TEST_PATH)
    real = pd.read_csv(REAL_PATH) if os.path.exists(REAL_PATH) else pd.DataFrame()
    pred = pd.read_csv(PRED_PATH) if os.path.exists(PRED_PATH) else pd.DataFrame()

    # Merge nh√£n th·∫≠t v√† d·ª± ƒëo√°n
    if "label" not in test.columns and not real.empty and "label" in real.columns:
        test = test.merge(real[["id_student", "label"]], on="id_student", how="left")
    if not pred.empty and "predicted_label" in pred.columns:
        test = test.merge(pred[["id_student", "predicted_label", "prob_pass"]], on="id_student", how="left")

    for c in ["tong_click", "so_bai_nop", "diem_tb", "ti_le_hoan_thanh", "so_tuan_hoat_dong"]:
        if c not in test.columns:
            test[c] = np.nan
    return test

df = load_data()
if df.empty:
    st.stop()

# =============================
# 2Ô∏è‚É£ C·∫§U H√åNH NG∆Ø·ªúI D√ôNG
# =============================
st.sidebar.header("‚öôÔ∏è T√πy ch·ªânh hi·ªÉn th·ªã")

# Live status badge
status = read_status()
if status:
    st.sidebar.success(f"üü¢ Live: {status.get('scenario','?')} @ {status.get('timestamp','--')} (test.csv {format_mtime(status.get('test_csv_mtime',0))})")
else:
    st.sidebar.warning("‚ö†Ô∏è Live simulator ch∆∞a ch·∫°y")

metrics_map = {
    "composite_index": "Ch·ªâ s·ªë t·ªïng h·ª£p (Learning Index)",
    "tong_click": "T·ªïng l∆∞·ª£t truy c·∫≠p",
    "so_bai_nop": "S·ªë b√†i ƒë√£ n·ªôp",
    "diem_tb": "ƒêi·ªÉm trung b√¨nh",
    "ti_le_hoan_thanh": "T·ª∑ l·ªá ho√†n th√†nh (%)",
    "so_tuan_hoat_dong": "S·ªë tu·∫ßn ho·∫°t ƒë·ªông"
}

selected_metric = st.sidebar.selectbox(
    "Ch·ªçn ch·ªâ s·ªë hi·ªÉn th·ªã:",
    list(metrics_map.keys()),
    format_func=lambda x: metrics_map[x]
)

chart_type = st.sidebar.selectbox("Lo·∫°i bi·ªÉu ƒë·ªì:", ["Histogram", "Boxplot", "Scatter"])
show_twin_delta = st.sidebar.checkbox("Hi·ªÉn th·ªã Twin Delta (Radar so s√°nh)", True)

# =============================
# 3Ô∏è‚É£ M√î PH·ªéNG T√ÅC ƒê·ªòNG
# =============================
st.sidebar.markdown("---")
st.sidebar.subheader("üß™ M√¥ ph·ªèng t√°c ƒë·ªông trung b√¨nh l·ªõp")

click_factor = st.sidebar.slider("üìö TƒÉng/Gi·∫£m l∆∞·ª£t click (%)", -50, 50, 0)
submit_factor = st.sidebar.slider("üìù TƒÉng/Gi·∫£m s·ªë b√†i n·ªôp (%)", -50, 50, 0)
score_factor = st.sidebar.slider("üíØ TƒÉng/Gi·∫£m ƒëi·ªÉm TB (%)", -50, 50, 0)
completion_factor = st.sidebar.slider("üìà TƒÉng/Gi·∫£m t·ª∑ l·ªá ho√†n th√†nh (%)", -50, 50, 0)
week_factor = st.sidebar.slider("üóìÔ∏è TƒÉng/Gi·∫£m s·ªë tu·∫ßn ho·∫°t ƒë·ªông (%)", -50, 50, 0)

# =============================
# 4Ô∏è‚É£ H√ÄM T√çNH CH·ªà S·ªê T·ªîNG H·ª¢P
# =============================
def compute_learning_index(df_input):
    df_calc = df_input.copy()
    for col in ["tong_click", "so_bai_nop", "diem_tb", "ti_le_hoan_thanh", "so_tuan_hoat_dong"]:
        if col not in df_calc.columns:
            df_calc[col] = 0
    df_calc["composite_index"] = (
        0.3 * df_calc["diem_tb"].fillna(0) / 100 +
        0.25 * df_calc["ti_le_hoan_thanh"].fillna(0) +
        0.2 * df_calc["so_bai_nop"].fillna(0) / 10 +
        0.15 * df_calc["tong_click"].fillna(0) / 20000 +
        0.1 * df_calc["so_tuan_hoat_dong"].fillna(0) / 20
    ) * 100
    return df_calc

# √Åp d·ª•ng cho c·∫£ b·∫£n th·ª±c & m√¥ ph·ªèng
df = compute_learning_index(df)
df_sim = compute_learning_index(df)
df_sim["tong_click"] *= (1 + click_factor / 100)
df_sim["so_bai_nop"] *= (1 + submit_factor / 100)
df_sim["diem_tb"] *= (1 + score_factor / 100)
df_sim["ti_le_hoan_thanh"] *= (1 + completion_factor / 100)
df_sim["so_tuan_hoat_dong"] *= (1 + week_factor / 100)
df_sim = compute_learning_index(df_sim)

# =============================
# 5Ô∏è‚É£ HAI C·ªòT SONG SONG (TH·ª∞C & ·∫¢O)
# =============================
colL, colR = st.columns(2)

# --- C·ªòT TR√ÅI: PHYSICAL TWIN ---
with colL:
    st.header("üß© Physical Class Twin ‚Äî D·ªØ li·ªáu th·ª±c t·∫ø")
    col1, col2, col3 = st.columns(3)
    col1.metric("üë• S·ªë SV", len(df))
    col2.metric("üéØ T·ª∑ l·ªá ƒë·∫°t (th·ª±c)", f"{(df['label'].mean()*100):.1f}%")
    col3.metric("üíØ ƒêi·ªÉm TB", f"{df['diem_tb'].mean():.1f}")

    if chart_type == "Histogram":
        fig1 = px.histogram(df, x=selected_metric, color="label",
                            title=f"Ph√¢n b·ªë {metrics_map[selected_metric]} (Th·ª±c t·∫ø)",
                            labels={"label": "K·∫øt qu·∫£"}, nbins=30)
    elif chart_type == "Boxplot":
        fig1 = px.box(df, x="label", y=selected_metric, color="label",
                      title=f"Ph√¢n b·ªë {metrics_map[selected_metric]} (Th·ª±c t·∫ø)")
    else:
        fig1 = px.scatter(df, x="diem_tb", y=selected_metric, color="label",
                          title=f"T∆∞∆°ng quan ƒêi·ªÉm TB v√† {metrics_map[selected_metric]} (Th·ª±c t·∫ø)")
    st.plotly_chart(fig1, use_container_width=True)

# --- C·ªòT PH·∫¢I: DIGITAL TWIN ---
with colR:
    st.header("ü§ñ Digital Class Twin ‚Äî M√¥ ph·ªèng d·ª± ƒëo√°n")
    col1, col2, col3 = st.columns(3)
    col1.metric("üìä SV m√¥ ph·ªèng", len(df_sim))
    sim_rate = (df["label"].mean() * 100) + (score_factor + completion_factor) / 2
    delta = abs(sim_rate - df["label"].mean() * 100)
    col2.metric("üéØ T·ª∑ l·ªá ƒë·∫°t (m√¥ ph·ªèng)", f"{sim_rate:.1f}%")
    col3.metric("‚öôÔ∏è Sai l·ªách twin (%)", f"{delta:.1f}%")

    if chart_type == "Histogram":
        fig2 = px.histogram(df_sim, x=selected_metric, color="label",
                            title=f"Ph√¢n b·ªë {metrics_map[selected_metric]} (M√¥ ph·ªèng)",
                            labels={"label": "K·∫øt qu·∫£"}, nbins=30)
    elif chart_type == "Boxplot":
        fig2 = px.box(df_sim, x="label", y=selected_metric, color="label",
                      title=f"Ph√¢n b·ªë {metrics_map[selected_metric]} (M√¥ ph·ªèng)")
    else:
        fig2 = px.scatter(df_sim, x="diem_tb", y=selected_metric, color="label",
                          title=f"T∆∞∆°ng quan ƒêi·ªÉm TB v√† {metrics_map[selected_metric]} (M√¥ ph·ªèng)")
    st.plotly_chart(fig2, use_container_width=True)

# =============================
# 6Ô∏è‚É£ BI·ªÇU ƒê·ªí SO S√ÅNH CHUNG (ƒêI·ªÇM CHUNG)
# + Confusion-like matrix (n·∫øu c√≥ d·ª± ƒëo√°n)
# =============================
st.markdown("---")
st.subheader(f"üìä So s√°nh {metrics_map[selected_metric]} gi·ªØa Th·ª±c t·∫ø v√† M√¥ ph·ªèng (c√πng thang ƒëi·ªÉm)")

if "label" in df.columns:
    real_group = df.groupby("label")[selected_metric].mean().reset_index()
    sim_group = df_sim.groupby("label")[selected_metric].mean().reset_index()

    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=real_group["label"], y=real_group[selected_metric],
        mode="lines+markers", name="Th·ª±c t·∫ø",
        line=dict(color="blue", width=3)
    ))
    fig.add_trace(go.Scatter(
        x=sim_group["label"], y=sim_group[selected_metric],
        mode="lines+markers", name="M√¥ ph·ªèng",
        line=dict(color="red", dash="dash", width=2)
    ))

    # ƒê∆∞·ªùng ch√™nh l·ªách
    for i in range(len(real_group)):
        fig.add_shape(
            type="line",
            x0=real_group["label"].iloc[i], y0=real_group[selected_metric].iloc[i],
            x1=sim_group["label"].iloc[i], y1=sim_group[selected_metric].iloc[i],
            line=dict(color="gray", dash="dot")
        )

    fig.update_layout(
        title=f"So s√°nh {metrics_map[selected_metric]} theo nh√≥m (0=Kh√¥ng ƒë·∫°t, 1=ƒê·∫°t)",
        xaxis_title="Nh√≥m k·∫øt qu·∫£",
        yaxis_title="ƒêi·ªÉm (chu·∫©n h√≥a 0‚Äì100)",
        legend_title="Ngu·ªìn d·ªØ li·ªáu",
        template="plotly_white"
    )
    st.plotly_chart(fig, use_container_width=True)

# =============================
# 7Ô∏è‚É£ RADAR ‚Äî TWIN DELTA
# =============================
if show_twin_delta:
    st.markdown("---")
    st.subheader("üìà Twin Delta ‚Äî So s√°nh trung b√¨nh l·ªõp (Th·ª±c vs ·∫¢o)")
    metrics = ["tong_click", "so_bai_nop", "diem_tb", "ti_le_hoan_thanh", "so_tuan_hoat_dong"]
    real_avg = [df[m].mean() for m in metrics]
    sim_avg = [df_sim[m].mean() for m in metrics]

    radar_df = pd.DataFrame({
        "Ch·ªâ s·ªë": [metrics_map[m] for m in metrics],
        "Th·ª±c t·∫ø": real_avg,
        "M√¥ ph·ªèng": sim_avg
    })

    fig_radar = go.Figure()
    fig_radar.add_trace(go.Scatterpolar(r=radar_df["Th·ª±c t·∫ø"], theta=radar_df["Ch·ªâ s·ªë"],
                                        fill="toself", name="Th·ª±c t·∫ø"))
    fig_radar.add_trace(go.Scatterpolar(r=radar_df["M√¥ ph·ªèng"], theta=radar_df["Ch·ªâ s·ªë"],
                                        fill="toself", name="M√¥ ph·ªèng",
                                        line=dict(dash="dash")))
    fig_radar.update_layout(polar=dict(radialaxis=dict(visible=True)), showlegend=True)
    st.plotly_chart(fig_radar, use_container_width=True)

# =============================
# 8Ô∏è‚É£ CONFUSION-LIKE MATRIX (n·∫øu c√≥ label & predicted_label)
# =============================
st.markdown("---")
st.subheader("üßÆ ƒê·ªëi chi·∫øu k·∫øt qu·∫£ (Th·ª±c vs D·ª± ƒëo√°n)")
if "label" in df.columns and "predicted_label" in df.columns:
    cm = df.groupby(["label", "predicted_label"]).size().unstack(fill_value=0)
    cm = cm.rename(index={0:"Th·ª±c: Fail",1:"Th·ª±c: Pass"}, columns={0:"D·ª± ƒëo√°n: Fail",1:"D·ª± ƒëo√°n: Pass"})
    st.dataframe(cm, use_container_width=True)
else:
    st.info("Ch∆∞a c√≥ c·ªôt d·ª± ƒëo√°n ƒë·ªÉ ƒë·ªëi chi·∫øu.")

# =============================
# 9Ô∏è‚É£ GHI CH√ö
# =============================
st.caption("""
üí° Trang n√†y hi·ªÉn th·ªã song song hai Twin (Th·ª±c & ·∫¢o).  
B·∫°n c√≥ th·ªÉ ch·ªçn **‚ÄúCh·ªâ s·ªë t·ªïng h·ª£p (Learning Index)‚Äù** ƒë·ªÉ xem ƒëi·ªÉm h·ªçc t·∫≠p t·ªïng th·ªÉ (0‚Äì100),  
v√† quan s√°t **ƒë∆∞·ªùng n√©t ƒë·ª©t** th·ªÉ hi·ªán ch√™nh l·ªách gi·ªØa hai m√¥ h√¨nh.
""")
